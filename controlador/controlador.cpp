#include <iostream>#include <stdlib.h>#include "control.cpp"#include "demo.cpp"extern "C" {#include "extApi.h"}using namespace std;int main(int argc,char* argv[]){		string input;	int puerto=20001;	string ip = "127.0.0.1";	int clientID;	bool demo=false;	switch (argc)	{		case 2:		ip= argv[1];		break;		case 3:		ip= argv[1];		puerto = atoi(argv[2]);		break;		default:		cout <<"Acepta argumentos: ip puerto (por defecto: 127.0.0.1 20001)\n";		cout <<"\n¿Quiere introducir ip y puerto?[s/n]\n";		getline(cin,input);		if (!input.compare(0,1,"s")) {			cout << "IP:\n";			getline(cin,ip);			cout << "Puerto:\n";			cin >> puerto;			cin.ignore();		} else cout <<"Usando valores por defecto ip: 127.0.0.1 puerto: 20001\n";		break;	}	cout <<"\nEjecutar:\n\n" << "1.Demo (escena demo2khepera.ttt)\n2.Código de control (clase Control)\n";	getline(cin,input);	if (!input.compare(0,1,"1")) {		demo = true;		cout << "\n\nSelección: Demo\n\n";	} else {		cout << "\n\nSelección: Código de Control\n\n";	}	//código de inicio de sim remoto en puerto estándar de la API remota V-REP 19997 (opcional)	cout << "¿Quiere iniciar la simulación remotamente (puerto estándar 19997)?[s/n]\n";	getline(cin,input);		if (!input.compare(0,1,"s"))	{		clientID=simxStart((simxChar*) ip.c_str(),19997,true,true,2000,5);		if (clientID!=-1)		{			simxStartSimulation(clientID,simx_opmode_oneshot_wait);			simxFinish(clientID);			cout << "Simulación iniciada\n";		} else cout << "Error: Imposible iniciar simulación remotamente. (Pulsar Play en V-REP y volver a intentar)\n";	} else {		cout << "Pulse \"Play\" en V-REP y pulse Intro para continuar...";		cin.get();	}    //Dos intentos de conexión al servidor (en la primera ejecución V-REP tarda en cargar la escena    //provocando errores de timeout. Con 2 intentos es suficiente para evitar problemas <- PRUEBAS: CONFIRMAD.)	for (int i = 0; i < 2; i++) {		if (clientID==-1 || i == 0) 	clientID=simxStart((simxChar*) ip.c_str(),puerto,true,true,2000,5);	}	if (clientID!=-1)	{			cout << "Controlador: Conexion establecida\n";		if (demo)		{			Demo demo2khepera;			//llamada a código demo			demo2khepera.control(clientID);		} else {			Control prueba;    		//llamada a código del usuario    		cout << "Controlador: Código de control invocado.\n";			prueba.control(clientID);		}				cout << "Controlador: Fin de código de control\n";			} else {		cout << "Error: Imposible conectar con el servidor. Asegúrese de que el puerto es correcto (" << puerto <<")\n";		cout << "Debe ejecutar un proceso servidor en el Host Simulador, normalmente con una llamada a\n";		cout << "simExtRemoteApiStart(puerto) en un Child Script de Lua.\n";		cout << "Ver código de control demo y escena demo2khepera.ttt\n";		return 0;	}	simxFinish(clientID);	cout << "Controlador: Conexión con servidor cerrada\n";	return(0);}